package util

import (
	"errors"
	"fmt"
	"github.com/benizzio/open-asset-allocator/api/rest/model"
	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
	"net/http"
	"reflect"
)

// BindAndValidateJSONWithErrorResponse binds the request body to the provided struct and validates it.
// It handles validation errors by returning appropriate HTTP responses.
// (this function was generated by AI)
func BindAndValidateJSONWithErrorResponse(context *gin.Context, bindingTarget interface{}) error {
	if err := context.ShouldBindJSON(bindingTarget); err == nil {
		return nil
	} else if validationErrors := extractValidationErrors(err); validationErrors != nil {
		// Handle validation errors
		errorMessages := formatValidationErrorMessages(validationErrors, bindingTarget)
		sendValidationErrorResponse(context, errorMessages)
		return err
	} else {
		// Handle non-validation errors
		return err
	}
}

// extractValidationErrors attempts to extract validation errors from the given error.
// Returns nil if the error is not a validation error.
// (this function was generated by AI)
func extractValidationErrors(inputError error) validator.ValidationErrors {
	var validationErrors validator.ValidationErrors
	if errors.As(inputError, &validationErrors) {
		return validationErrors
	}
	return nil
}

// formatValidationErrorMessages converts validation errors into human-readable messages.
// (this function was generated by AI)
func formatValidationErrorMessages(validationErrors validator.ValidationErrors, targetStruct interface{}) []string {
	errorMessages := make([]string, 0, len(validationErrors))
	structType := reflect.TypeOf(targetStruct)
	if structType.Kind() == reflect.Ptr {
		structType = structType.Elem()
	}

	for _, validationError := range validationErrors {
		// Extract needed information from validation error before passing to getJSONFieldName
		namespace := validationError.Namespace()
		fieldName := validationError.Field()
		jsonFieldName := getJSONFieldName(namespace, fieldName, structType)
		message := fmt.Sprintf(
			"Field '%s' failed validation: %s",
			jsonFieldName,
			formatValidationError(validationError),
		)
		errorMessages = append(errorMessages, message)
	}

	return errorMessages
}

// sendValidationErrorResponse sends a standardized HTTP response for validation errors.
// (this function was generated by AI)
func sendValidationErrorResponse(context *gin.Context, errorMessages []string) {
	context.JSON(
		http.StatusBadRequest, model.ErrorResponse{
			ErrorMessage: "Validation failed",
			Details:      errorMessages,
		},
	)
}

// formatValidationError formats validation errors into readable messages.
// (this function was generated by AI)
func formatValidationError(fieldError validator.FieldError) string {
	switch fieldError.Tag() {
	case "required":
		return "is required"
	case "min":
		return fmt.Sprintf("must be at least %s", fieldError.Param())
	case "max":
		return fmt.Sprintf("must not exceed %s", fieldError.Param())
	default:
		return fieldError.Tag()
	}
}
