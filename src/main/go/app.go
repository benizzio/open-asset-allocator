package main

import (
	"flag"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/golang/glog"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

type environment struct {
	port                   string
	webStaticContentPath   string
	webStaticSourceRelPath string
	rootHTMLFilename       string
	webStaticSourcePath    string
}

func main() {

	var env = getEnvironment()

	if configLogger() {
		return
	}

	configRouter(env)
}

func getEnvironment() environment {

	var tempWebStaticContentPath = os.Getenv("WEB_STATIC_CONTENT_PATH")
	var tempWebStaticSourceRelPath = os.Getenv("WEB_STATIC_SOURCE_REL_PATH")

	return environment{
		port:                   os.Getenv("PORT"),
		webStaticContentPath:   tempWebStaticContentPath,
		webStaticSourceRelPath: tempWebStaticSourceRelPath,
		rootHTMLFilename:       os.Getenv("ROOT_HTML_FILENAME"),
		webStaticSourcePath:    tempWebStaticContentPath + tempWebStaticSourceRelPath,
	}
}

func configRouter(env environment) {

	glog.Info("Configuring Gin router")

	var router = gin.Default()

	// Access to static source files (e.g. .js, .css, .map)
	glog.Infof("Serving static source files at %s from %s", env.webStaticSourceRelPath, env.webStaticSourcePath)
	router.Static(env.webStaticSourceRelPath, env.webStaticSourcePath)

	// Access to the root HTML file
	var rootHTMLPath = env.webStaticContentPath + "/" + env.rootHTMLFilename
	glog.Infof("Serving root HTML file at / from  %s", rootHTMLPath)
	router.StaticFile("/", rootHTMLPath)

	// Access to any autogenerated bundled web files for the root
	// TODO treat frontend routes resolution
	router.GET("/:filepath", func(context *gin.Context) {
		file := context.Param("filepath")
		if strings.HasSuffix(file, ".js") ||
			strings.HasSuffix(file, ".js.map") ||
			strings.HasSuffix(file, ".css") {
			context.File(filepath.Join(env.webStaticContentPath, file))
		} else {
			context.Status(http.StatusNotFound)
		}
	})

	err := router.Run(fmt.Sprintf(":%s", env.port))
	if err != nil {
		glog.Error("Error starting server: ", err)
	}
}

func configLogger() bool {

	err := flag.Set("logtostderr", "true")
	if err != nil {
		fmt.Println("Error setting logtostderr flag: ", err)
		return true
	}
	err = flag.Set("alsologtostderr", "true")
	if err != nil {
		fmt.Println("Error setting alsologtostderr flag: ", err)
		return true
	}
	err = flag.Set("stderrthreshold", "INFO")
	if err != nil {
		fmt.Println("Error setting stderrthreshold flag: ", err)
		return true
	}

	flag.Parse()
	defer glog.Flush()

	return false
}
